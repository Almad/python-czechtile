#!/usr/bin/env python
# -*- coding: utf-8 -*-

""" Czechtile: File conversion tool. """

import os
from os import pardir
from os.path import exists
import sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)), os.path.pardir)))
import logging



from optparse import OptionParser

from czechtile import parse, expand, register_map, expander_map

parser = OptionParser()

parser.add_option("", "--debug",
    action="store_true",
    default=False,
    dest="debug",
    help="Vypsat chybove hlasky")

parser.add_option("", "--xhtml",
    action="store",
    default=None,
    metavar='FILE',
    dest="xhtml_file",
    help="File to store XHTML to (DEPRECATED, use -f xhtml and -o)")

parser.add_option("", "--html",
    action="store",
    default=None,
    metavar='FILE',
    dest="html_file",
    help="File to store XHTML to (DEPRECATED, use -f xhtml and -o)")

parser.add_option("", "--docbook4",
    action="store",
    metavar='FILE',
    dest="docbook4_file",
    help="File to store Docbook 4 to (DEPRECATED, use -f docbook4 and -o)")

parser.add_option("-f", "--format",
    action="store",
    dest="format",
    help="Format to transform Czechtile file to")

parser.add_option("-o", "--output-file",
    action="store",
    metavar='FILE',
    dest="output_file",
    help="File to store transformation to")

parser.add_option("", "--nowrap",
    action="store_true",
    dest="nowrap",
    help="Do not add 'top-level' information")

def _check_options(options, args):
    if options.debug == True:
        logging.basicConfig(level=logging.DEBUG)

def writeFile(fn, content):
    f = open(fn, 'wb')
    f.write(content.encode('utf-8'))
    f.close()

def main():
    (options, args) = parser.parse_args()
    _check_options(options, args)
	
    if len(args) < 1:
        raise ValueError("Czechtile file not given!")
    czt_file = args[0]
    if not exists(czt_file):
        raise ValueError("Czechtile file %s do not exist!" % czt_file)
    txt = open(czt_file).read()
    logging.debug('File readed: %s' % txt)

    tree = parse(txt, register_map)
    tree.wrap_document = not options.nowrap

    if options.xhtml_file is not None:
        writeFile(options.xhtml_file, expand(tree, 'xhtml11', expander_map))

    if options.html_file is not None:
        writeFile(options.html_file, expand(tree, 'xhtml11', expander_map))

    if options.docbook4_file is not None:
        writeFile(options.docbook4_file, expand(tree, 'docbook4', expander_map))

    if options.format is not None:
    	if options.format in ('xhtml1', 'xhtml11', 'html', 'xhtml'):
    		options.format = 'xhtml11'

    	output = expand(tree, options.format, expander_map)
        
        if options.output_file is None:
    		print output
        else:
            writeFile(options.output_file, output)


if __name__ == '__main__':
    main()
